import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom'; // Import useNavigate for redirection

// inline eye icon to avoid relying on external fonts
const EyeIcon = ({ visible }) => (
  visible ? (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-600" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-5 0-9-4-9-7s4-7 9-7a9.964 9.964 0 014.031.84M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 3l18 18" />
    </svg>
  ) : (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-600" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c5 0 9 4 9 7 0 1.18-.293 2.29-.805 3.286M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
    </svg>
  )
);

const AuthForm = () => {
  const navigate = useNavigate(); // Initialize navigate function
  
  // --- new: dynamic base detection ---
  const API_BASE = typeof window !== 'undefined' ? (window._API_BASE || '') : '';
  const DEFAULT_API_BASE = import.meta?.env?.VITE_API_BASE || 'http://localhost:4000';
  const initialBase = API_BASE || DEFAULT_API_BASE;
  const [baseUrl, setBaseUrl] = useState(initialBase); // will be resolved at runtime

  // --- added: simple captcha generator (was missing) ---
  const generateCaptcha = () => {
    // small arithmetic captcha that's safe and easy for users
    const a = Math.floor(Math.random() * 9) + 1; // 1..9
    const b = Math.floor(Math.random() * 9) + 1;
    const ops = ['+', '-', '×'];
    const op = ops[Math.floor(Math.random() * ops.length)];
    let question = `${a} ${op} ${b} = ?`;
    let answer;
    if (op === '+') answer = a + b;
    else if (op === '-') answer = a - b;
    else answer = a * b;
    return { question, answer };
  };
  // --- end captcha generator ---

  // attempt to detect working health endpoint and set baseUrl accordingly
  useEffect(() => {
    let mounted = true;
    const candidates = [
      (API_BASE || DEFAULT_API_BASE).replace(/\/$/, ''),
      ((API_BASE || DEFAULT_API_BASE).replace(/\/$/, '') + '/api'),
    ].filter(Boolean);

    (async () => {
      for (const cand of [...new Set(candidates)]) {
        try {
          const h = await fetch(`${cand}/health`, { method: 'GET', mode: 'cors' });
          if (h && h.ok) {
            if (!mounted) return;
            // decide base: if health was /api/health then base should include /api
            if (cand.endsWith('/api')) setBaseUrl(cand);
            else setBaseUrl(cand);
            console.log('Detected backend base URL:', cand);
            return;
          }
        } catch (err) {
          // ignore and try next
          console.warn('Health check failed for', cand, err?.message);
        }
      }
      // nothing responded; keep initial and let apiCall show detailed messages
      if (mounted) {
        console.warn('No backend health endpoint responded; using:', initialBase);
      }
    })();

    return () => { mounted = false; };
  }, []);
  // --- end new ---

  // Derived server origin and health endpoint (use detected baseUrl)
  const SERVER_ORIGIN = (() => {
    try { return new URL(baseUrl).origin + (baseUrl.endsWith('/api') ? '/api' : ''); } catch (e) { return 'http://localhost:4000'; }
  })();
  const HEALTH_ENDPOINT = `${SERVER_ORIGIN.replace(/\/$/, '')}/health`;
  
  // State management
  const [currentUser, setCurrentUser] = useState(null);
  const [activeForm, setActiveForm] = useState('login');
  const [showForgotPassword, setShowForgotPassword] = useState(false);
  const [showVerification, setShowVerification] = useState(false);
  const [messages, setMessages] = useState([]);
  const [pendingVerification, setPendingVerification] = useState(null);
  
  // Form data states
  const [loginData, setLoginData] = useState({ email: '', password: '' });
  const [signupData, setSignupData] = useState({ 
    name: '', email: '', password: '', confirmPassword: '' 
  });
  const [forgotEmail, setForgotEmail] = useState('');
  const [verificationCode, setVerificationCode] = useState('');
  const [rememberMe, setRememberMe] = useState(false);
  const [termsAccepted, setTermsAccepted] = useState(false);
  
  // Captcha state
  const [captcha, setCaptcha] = useState({ question: '', answer: 0 });
  const [captchaInput, setCaptchaInput] = useState('');
  const [signupCaptchaInput, setSignupCaptchaInput] = useState('');
  
  // Password strength
  const [passwordStrength, setPasswordStrength] = useState(0);
  
  // Password visibility
  const [passwordVisible, setPasswordVisible] = useState({
    login: false,
    signup: false,
    confirm: false
  });

  // Initialize captcha on component mount
  useEffect(() => {
    setCaptcha(generateCaptcha());
    
    // Check for remembered user
    try {
      const rememberedUser = JSON.parse(localStorage.getItem('rememberedUser') || 'null');
      if (rememberedUser) {
        setLoginData({
          email: rememberedUser.email,
          password: rememberedUser.password || ''
        });
        setRememberMe(true);
      }
    } catch (e) {
      // ignore parse errors
    }
  }, []);

  // Toggle Password Visibility
  const togglePasswordVisibility = (field) => {
    setPasswordVisible(prev => ({
      ...prev,
      [field]: !prev[field]
    }));
  };

  // Check Password Strength
  const checkPasswordStrength = (password) => {
    let strength = 0;
    
    if (password.length >= 8) strength++;
    if (password.match(/[a-z]/) && password.match(/[A-Z]/)) strength++;
    if (password.match(/[0-9]/)) strength++;
    if (password.match(/[^a-zA-Z0-9]/)) strength++;
    
    setPasswordStrength(strength);
    return strength;
  };

  // Generate Strong Password
  const generatePassword = () => {
    const lowercase = 'abcdefghijklmnopqrstuvwxyz';
    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const numbers = '0123456789';
    const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';
    
    let password = '';
    password += lowercase[Math.floor(Math.random() * lowercase.length)];
    password += uppercase[Math.floor(Math.random() * uppercase.length)];
    password += numbers[Math.floor(Math.random() * numbers.length)];
    password += symbols[Math.floor(Math.random() * symbols.length)];
    
    const allChars = lowercase + uppercase + numbers + symbols;
    for (let i = 4; i < 12; i++) {
      password += allChars[Math.floor(Math.random() * allChars.length)];
    }
    
    password = password.split('').sort(() => Math.random() - 0.5).join('');
    
    setSignupData(prev => ({
      ...prev,
      password,
      confirmPassword: password
    }));
    
    checkPasswordStrength(password);
    showMessage('Strong password generated!', 'success');
  };

  // Show Message
  const showMessage = (message, type = 'info') => {
    const id = Date.now();
    setMessages(prev => [...prev, { id, message, type }]);
    
    setTimeout(() => {
      setMessages(prev => prev.filter(msg => msg.id !== id));
    }, 5000);
  };

  // API call function (diagnostic version)
  const apiCall = async (endpoint, method = 'GET', data = null, timeoutMs = 8000) => {
    const controller = new AbortController();
    const timer = setTimeout(() => controller.abort(), timeoutMs);

    // use detected baseUrl
    const url = `${baseUrl.replace(/\/$/, '')}${endpoint.startsWith('/') ? endpoint : '/' + endpoint}`;
    const options = {
      method,
      headers: { 'Content-Type': 'application/json' },
      signal: controller.signal,
      mode: 'cors',
    };
    if (data && (method === 'POST' || method === 'PUT')) options.body = JSON.stringify(data);

    console.groupCollapsed && console.groupCollapsed('apiCall');
    console.log('Request URL:', url);
    console.log('Options:', options);
    try {
      const res = await fetch(url, options);
      clearTimeout(timer);
      console.log('Response status:', res.status, res.statusText);

      // Safely parse response as JSON when possible, otherwise get text
      let payload = null;
      const contentType = res.headers.get('content-type') || '';
      try {
        if (contentType.includes('application/json')) {
          payload = await res.json();
        } else {
          payload = await res.text();
        }
      } catch (parseErr) {
        try { payload = await res.text(); } catch (e) { payload = null; }
      }
      console.log('Parsed response payload:', payload);

      if (!res.ok) {
        const bodyMsg = typeof payload === 'string' ? payload : (payload?.error || payload?.message);
        const msg = bodyMsg || `${res.status} ${res.statusText}` || `Request failed: ${res.status}`;
        const err = new Error(msg);
        err.status = res.status;
        err.payload = payload;
        throw err;
      }

      console.groupEnd && console.groupEnd('apiCall');
      return payload;
    } catch (err) {
      clearTimeout(timer);
      console.error('API call error:', err);

      // If network/CORS problem, attempt direct health check and log details
      if (err instanceof TypeError || err.name === 'TypeError') {
        console.warn('TypeError detected — likely network/CORS. Running health check:', HEALTH_ENDPOINT);
        try {
          const h = await fetch(HEALTH_ENDPOINT, { method: 'GET' });
          console.log('Health check response status:', h.status);
          const text = await h.text();
          console.log('Health check body:', text);
          if (!h.ok) throw new Error('health check returned non-ok');
          showMessage('Backend reachable but network error on API call (check console for CORS).', 'error');
        } catch (healthErr) {
          console.error('Health check failed:', healthErr);
          showMessage('Cannot reach backend. Is the server running? (checked /health)', 'error');
        }
      } else if (err.name === 'AbortError') {
        showMessage('Request timed out. Backend may be slow or unreachable.', 'error');
      } else {
        const serverMsg = err.payload && typeof err.payload === 'string'
          ? err.payload
          : (err.payload && typeof err.payload === 'object' ? (err.payload.error || err.payload.message) : err.message);
        showMessage(`Server error (${err.status || 'error'}): ${serverMsg || err.message}`, 'error');
      }

      console.groupEnd && console.groupEnd('apiCall');
      throw err;
    }
  };
  
  // Form Handlers
  const handleLoginSubmit = async (e) => {
    e.preventDefault();
    
    // Check captcha
    if (parseInt(captchaInput, 10) !== captcha.answer) {
      showMessage('Incorrect captcha answer!', 'error');
      setCaptcha(generateCaptcha());
      return;
    }
    
    try {
      const result = await apiCall('/auth/login', 'POST', {
        email: loginData.email,
        password: loginData.password
      });
      
      const { user, token } = result;
      
      // Remember me functionality
      if (rememberMe) {
        localStorage.setItem('rememberedUser', JSON.stringify({ 
          email: loginData.email
        }));
        localStorage.setItem('authToken', token);
      } else {
        localStorage.removeItem('rememberedUser');
        sessionStorage.setItem('authToken', token);
      }
      
      setCurrentUser(user);
      showMessage('Login successful! Redirecting...', 'success');
      
      // Redirect to home page after successful login
      setTimeout(() => {
        navigate('/'); // Redirect to home page
      }, 1500);
    } catch (error) {
      // handled in apiCall
    }
  };

  const handleSignupSubmit = async (e) => {
    e.preventDefault();
    
    // Check captcha
    if (parseInt(signupCaptchaInput, 10) !== captcha.answer) {
      showMessage('Incorrect captcha answer!', 'error');
      setCaptcha(generateCaptcha());
      return;
    }
    
    if (signupData.password !== signupData.confirmPassword) {
      showMessage('Passwords do not match!', 'error');
      return;
    }
    
    if (checkPasswordStrength(signupData.password) < 3) {
      showMessage('Password is too weak! Please use a stronger password.', 'error');
      return;
    }
    
    if (!termsAccepted) {
      showMessage('Please accept the terms and conditions', 'error');
      return;
    }
    
    try {
      const result = await apiCall('/auth/register', 'POST', {
        name: signupData.name,
        email: signupData.email,
        password: signupData.password
      });
      
      setPendingVerification({ email: signupData.email });
      setShowVerification(true);
      
      showMessage('Account successfully created! Please check your email for verification code.', 'success');
    } catch (error) {
      // handled in apiCall
    }
  };

  const handleVerificationSubmit = async (e) => {
    e.preventDefault();
    
    if (!pendingVerification?.email) {
      showMessage('No pending verification found. Please register or request a code first.', 'error');
      return;
    }

    // capture the email before clearing pendingVerification
    const emailToVerify = pendingVerification.email;

    try {
      await apiCall('/auth/verify-email', 'POST', {
        email: emailToVerify,
        code: verificationCode
      });
      
      setShowVerification(false);
      setPendingVerification(null);
      showMessage('Email verified successfully! Redirecting to login...', 'success');
      
      setTimeout(() => {
        setActiveForm('login');
        setLoginData(prev => ({ ...prev, email: emailToVerify || prev.email }));
      }, 1500);
    } catch (error) {
      // handled in apiCall
    }
  };
  
  const handleForgotPasswordSubmit = async (e) => {
    e.preventDefault();
    
    try {
      // endpoint not implemented in backend stub — placeholder
      await apiCall('/auth/forgot-password', 'POST', {
        email: forgotEmail
      });
      
      showMessage('Password reset link sent to your email!', 'success');
      setShowForgotPassword(false);
    } catch (error) {
      // handled in apiCall
    }
  };
  
  const resendVerificationCode = async () => {
    if (!pendingVerification?.email) {
      showMessage('No email to resend code to. Please register first.', 'error');
      return;
    }
    try {
      await apiCall('/auth/send-verification', 'POST', { email: pendingVerification.email });
      showMessage('Verification code resent to your email!', 'success');
    } catch (error) {
      // handled in apiCall
    }
  };

  // Render Login Form
  const renderLoginForm = () => (
    <form onSubmit={handleLoginSubmit} className="space-y-6">
      <div>
        <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
          Email Address
        </label>
        <input
          type="email"
          id="email"
          className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200"
          placeholder="Enter your email"
          value={loginData.email}
          onChange={(e) => setLoginData({...loginData, email: e.target.value})}
          required
        />
      </div>
      
      <div>
        <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
          Password
        </label>
        <div className="relative">
          <input
            type={passwordVisible.login ? "text" : "password"}
            id="password"
            className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200 pr-12"
            placeholder="Enter your password"
            value={loginData.password}
            onChange={(e) => setLoginData({...loginData, password: e.target.value})}
            required
          />
          <button
            type="button"
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
            onClick={() => togglePasswordVisibility('login')}
          >
            <EyeIcon visible={passwordVisible.login} />
          </button>
        </div>
      </div>
      
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <input
            type="checkbox"
            id="remember"
            className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
            checked={rememberMe}
            onChange={(e) => setRememberMe(e.target.checked)}
          />
          <label htmlFor="remember" className="ml-2 block text-sm text-gray-700">
            Remember me
          </label>
        </div>
        
        <button
          type="button"
          className="text-sm text-purple-600 hover:text-purple-800 font-medium"
          onClick={() => setShowForgotPassword(true)}
        >
          Forgot Password?
        </button>
      </div>
      
      <div>
        <label htmlFor="captcha" className="block text-sm font-medium text-gray-700 mb-1">
          Security Check: {captcha.question}
        </label>
        <input
          type="number"
          id="captcha"
          className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200"
          placeholder="Enter the answer"
          value={captchaInput}
          onChange={(e) => setCaptchaInput(e.target.value)}
          required
        />
      </div>
      
      <button
        type="submit"
        className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 text-white py-3 px-4 rounded-lg font-semibold hover:from-purple-700 hover:to-indigo-700 transition duration-200 shadow-md"
      >
        Sign In
      </button>
      
      <div className="text-center mt-4">
        <p className="text-sm text-gray-600">
          Don't have an account?{' '}
          <button
            type="button"
            className="text-purple-600 hover:text-purple-800 font-medium"
            onClick={() => setActiveForm('signup')}
          >
            Sign Up
          </button>
        </p>
      </div>
    </form>
  );

  // Render Signup Form
  const renderSignupForm = () => (
    <form onSubmit={handleSignupSubmit} className="space-y-6">
      <div>
        <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
          Full Name
        </label>
        <input
          type="text"
          id="name"
          className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200"
          placeholder="Enter your full name"
          value={signupData.name}
          onChange={(e) => setSignupData({...signupData, name: e.target.value})}
          required
        />
      </div>
      
      <div>
        <label htmlFor="signup-email" className="block text-sm font-medium text-gray-700 mb-1">
          Email Address
        </label>
        <input
          type="email"
          id="signup-email"
          className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200"
          placeholder="Enter your email"
          value={signupData.email}
          onChange={(e) => setSignupData({...signupData, email: e.target.value})}
          required
        />
      </div>
      
      <div>
        <label htmlFor="signup-password" className="block text-sm font-medium text-gray-700 mb-1">
          Password
          <button
            type="button"
            className="ml-2 text-xs text-purple-600 hover:text-purple-800"
            onClick={generatePassword}
          >
            Generate Strong Password
          </button>
        </label>
        <div className="relative">
          <input
            type={passwordVisible.signup ? "text" : "password"}
            id="signup-password"
            className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200 pr-12"
            placeholder="Create a strong password"
            value={signupData.password}
            onChange={(e) => {
              setSignupData({...signupData, password: e.target.value});
              checkPasswordStrength(e.target.value);
            }}
            required
          />
          <button
            type="button"
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
            onClick={() => togglePasswordVisibility('signup')}
          >
            <EyeIcon visible={passwordVisible.signup} />
          </button>
        </div>
        
        {signupData.password && (
          <div className="mt-2">
            <div className="flex items-center mb-1">
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className={`h-2 rounded-full ${
                    passwordStrength === 0 ? 'bg-red-500' :
                    passwordStrength === 1 ? 'bg-red-500' :
                    passwordStrength === 2 ? 'bg-yellow-500' :
                    passwordStrength === 3 ? 'bg-green-500' : 'bg-green-600'
                  }`}
                  style={{ width: `${(passwordStrength / 4) * 100}%` }}
                ></div>
              </div>
            </div>
            <p className="text-xs text-gray-600">
              {passwordStrength === 0 ? 'Very Weak' :
               passwordStrength === 1 ? 'Weak' :
               passwordStrength === 2 ? 'Medium' :
               passwordStrength === 3 ? 'Strong' : 'Very Strong'}
            </p>
          </div>
        )}
      </div>
      
      <div>
        <label htmlFor="confirm-password" className="block text-sm font-medium text-gray-700 mb-1">
          Confirm Password
        </label>
        <div className="relative">
          <input
            type={passwordVisible.confirm ? "text" : "password"}
            id="confirm-password"
            className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200 pr-12"
            placeholder="Confirm your password"
            value={signupData.confirmPassword}
            onChange={(e) => setSignupData({...signupData, confirmPassword: e.target.value})}
            required
          />
          <button
            type="button"
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
            onClick={() => togglePasswordVisibility('confirm')}
          >
            <EyeIcon visible={passwordVisible.confirm} />
          </button>
        </div>
      </div>
      
      <div>
        <label htmlFor="signup-captcha" className="block text-sm font-medium text-gray-700 mb-1">
          Security Check: {captcha.question}
        </label>
        <input
          type="number"
          id="signup-captcha"
          className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200"
          placeholder="Enter the answer"
          value={signupCaptchaInput}
          onChange={(e) => setSignupCaptchaInput(e.target.value)}
          required
        />
      </div>
      
      <div className="flex items-center">
        <input
          type="checkbox"
          id="terms"
          className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
          checked={termsAccepted}
          onChange={(e) => setTermsAccepted(e.target.checked)}
          required
        />
        <label htmlFor="terms" className="ml-2 block text-sm text-gray-700">
          I agree to the <a href="#" className="text-purple-600 hover:text-purple-800">Terms and Conditions</a>
        </label>
      </div>
      
      <button
        type="submit"
        className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 text-white py-3 px-4 rounded-lg font-semibold hover:from-purple-700 hover:to-indigo-700 transition duration-200 shadow-md"
      >
        Create Account
      </button>
      
      <div className="text-center mt-4">
        <p className="text-sm text-gray-600">
          Already have an account?{' '}
          <button
            type="button"
            className="text-purple-600 hover:text-purple-800 font-medium"
            onClick={() => setActiveForm('login')}
          >
            Sign In
          </button>
        </p>
      </div>
    </form>
  );

  // Render Forgot Password Modal
  const renderForgotPasswordModal = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl shadow-2xl p-6 w-full max-w-md animate-scale-in">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-2xl font-bold text-gray-800">Reset Password</h2>
          <button
            onClick={() => setShowForgotPassword(false)}
            className="text-gray-500 hover:text-gray-700"
          >
            <i className="fas fa-times"></i>
          </button>
        </div>
        
        <p className="text-gray-600 mb-6">
          Enter your email address and we'll send you a link to reset your password.
        </p>
        
        <form onSubmit={handleForgotPasswordSubmit} className="space-y-4">
          <div>
            <label htmlFor="forgot-email" className="block text-sm font-medium text-gray-700 mb-1">
              Email Address
            </label>
            <input
              type="email"
              id="forgot-email"
              className="w-full px-4 py-3 bg-gray-100 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200"
              placeholder="Enter your email"
              value={forgotEmail}
              onChange={(e) => setForgotEmail(e.target.value)}
              required
            />
          </div>
          
          <button
            type="submit"
            className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 text-white py-3 px-4 rounded-lg font-semibold hover:from-purple-700 hover:to-indigo-700 transition duration-200"
          >
            Send Reset Link
          </button>
        </form>
      </div>
    </div>
  );

  // Render Verification Modal
  const renderVerificationModal = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl shadow-2xl p-6 w-full max-w-md animate-scale-in">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-2xl font-bold text-gray-800">Verify Your Email</h2>
          <button
            onClick={() => {
              setShowVerification(false);
              setPendingVerification(null);
            }}
            className="text-gray-500 hover:text-gray-700"
          >
            <i className="fas fa-times"></i>
          </button>
        </div>
        
        <p className="text-gray-600 mb-6">
          We've sent a verification code to <strong>{pendingVerification?.email}</strong>. 
          Please enter the code below to verify your email address.
        </p>
        
        <form onSubmit={handleVerificationSubmit} className="space-y-4">
          <div>
            <label htmlFor="verification-code" className="block text-sm font-medium text-gray-700 mb-1">
              Verification Code
            </label>
            <input
              type="text"
              id="verification-code"
              className="w-full px-4 py-3 bg-gray-100 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200"
              placeholder="Enter verification code"
              value={verificationCode}
              onChange={(e) => setVerificationCode(e.target.value)}
              required
            />
          </div>
          
          <button
            type="submit"
            className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 text-white py-3 px-4 rounded-lg font-semibold hover:from-purple-700 hover:to-indigo-700 transition duration-200"
          >
            Verify Email
          </button>
        </form>
        
        <div className="text-center mt-4">
          <p className="text-sm text-gray-600">
            Didn't receive the code?{' '}
            <button
              type="button"
              className="text-purple-600 hover:text-purple-800 font-medium"
              onClick={resendVerificationCode}
            >
              Resend Code
            </button>
          </p>
        </div>
      </div>
    </div>
  );

  // Message Component
  const Message = ({ message, type, onClose }) => (
    <div className={`p-4 mb-4 rounded-lg shadow-md flex items-center justify-between animate-slide-in ${
      type === 'error' ? 'bg-red-100 text-red-700' :
      type === 'success' ? 'bg-green-100 text-green-700' :
      'bg-blue-100 text-blue-700'
    }`}>
      <div className="flex items-center">
        <i className={`fas ${
          type === 'error' ? 'fa-exclamation-circle' :
          type === 'success' ? 'fa-check-circle' : 'fa-info-circle'
        } mr-3`}></i>
        <span>{message}</span>
      </div>
      <button
        onClick={onClose}
        className="ml-4 text-gray-500 hover:text-gray-700"
      >
        <i className="fas fa-times"></i>
      </button>
    </div>
  );

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 to-indigo-600 p-4">
      {/* Main Container */}
      <div className="w-full max-w-md">
        {/* Auth Form Container */}
        <div className="bg-white bg-opacity-20 backdrop-filter backdrop-blur-lg rounded-2xl shadow-2xl p-8 animate-fade-in">
          {/* Logo/Header */}
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-purple-600 to-indigo-600 rounded-full mb-4">
              <i className="fas fa-shield-alt text-white text-2xl"></i>
            </div>
            <h1 className="text-3xl font-bold text-gray-800">
              {activeForm === 'login' ? 'Welcome Back' : 'Create Account'}
            </h1>
            <p className="text-gray-600 mt-2">
              {activeForm === 'login' 
                ? 'Sign in to continue to your account' 
                : 'Sign up to get started'}
            </p>
          </div>

          {/* Render the appropriate form */}
          {activeForm === 'login' ? renderLoginForm() : renderSignupForm()}
        </div>

        {/* Modals */}
        {showForgotPassword && renderForgotPasswordModal()}
        {showVerification && renderVerificationModal()}

        {/* Success/Error Messages */}
        <div className="fixed top-4 right-4 z-50 max-w-sm w-full">
          {messages.map(msg => (
            <Message 
              key={msg.id} 
              message={msg.message} 
              type={msg.type} 
              onClose={() => setMessages(prev => prev.filter(m => m.id !== msg.id))}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

export default AuthForm;







// import React, { useState, useEffect } from 'react';
// import { useNavigate } from 'react-router-dom'; // Import useNavigate for redirection

// // inline eye icon to avoid relying on external fonts
// const EyeIcon = ({ visible }) => (
//   visible ? (
//     <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-600" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
//       <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-5 0-9-4-9-7s4-7 9-7a9.964 9.964 0 014.031.84M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
//       <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 3l18 18" />
//     </svg>
//   ) : (
//     <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-600" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
//       <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c5 0 9 4 9 7 0 1.18-.293 2.29-.805 3.286M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
//     </svg>
//   )
// );

// const AuthForm = () => {
//   const navigate = useNavigate(); // Initialize navigate function
  
//   // --- new: dynamic base detection (prefer proxy - blank => '/api') ---
//   const API_BASE = typeof window !== 'undefined' ? (window._API_BASE || '') : '';
//   const DEFAULT_API_BASE = import.meta?.env?.VITE_API_BASE || '';
//   const initialBase = API_BASE || DEFAULT_API_BASE || '';
//   const [baseUrl, setBaseUrl] = useState(initialBase); // will be resolved at runtime
//   // --- end new ---

//   // --- added: simple captcha generator (was missing) ---
//   const generateCaptcha = () => {
//     const a = Math.floor(Math.random() * 9) + 1;
//     const b = Math.floor(Math.random() * 9) + 1;
//     const ops = ['+', '-', '×'];
//     const op = ops[Math.floor(Math.random() * ops.length)];
//     let question = `${a} ${op} ${b} = ?`;
//     let answer;
//     if (op === '+') answer = a + b;
//     else if (op === '-') answer = a - b;
//     else answer = a * b;
//     return { question, answer };
//   };
//   // --- end captcha generator ---

//   // attempt to detect working health endpoint and set baseUrl accordingly
//   useEffect(() => {
//     let mounted = true;

//     const origin = (typeof window !== 'undefined' && window.location && window.location.origin) ? window.location.origin : '';
//     const candidates = [
//       { base: '/api', health: '/api/health' },       // prefer Vite proxy path
//       { base: '', health: '/health' },               // root /health on same origin
//       { base: origin, health: origin + '/health' },
//       { base: origin + '/api', health: origin + '/api/health' },
//       { base: 'http://localhost:5000', health: 'http://localhost:5000/health' },
//       { base: 'http://localhost:5000/api', health: 'http://localhost:5000/api/health' },
//       { base: 'http://localhost:4000', health: 'http://localhost:4000/health' },
//       { base: 'http://localhost:4000/api', health: 'http://localhost:4000/api/health' },
//     ].filter(c => c.health);

//     (async () => {
//       for (const cand of [...new Set(candidates)]) {
//         try {
//           const h = await fetch(cand.health, { method: 'GET', mode: 'cors' });
//           if (h && h.ok) {
//             if (!mounted) return;
//             // set baseUrl to chosen base. When base is '' we will use relative '/api' for requests by default.
//             setBaseUrl(cand.base);
//             console.log('Detected backend base URL (health ok):', cand.base || '(relative /api)');
//             return;
//           }
//         } catch (err) {
//           console.warn('Health check failed for', cand.health, err?.message);
//         }
//       }

//       if (mounted) {
//         // fallback: keep initialBase (may be empty => use proxy /api in requests)
//         setBaseUrl(initialBase);
//         console.warn('No backend health endpoint responded; using:', initialBase || '(relative /api)');
//         showMessage && showMessage('Cannot reach backend. Is the server running? (checked /health)', 'error');
//       }
//     })();

//     return () => { mounted = false; };
//   }, []);
//   // --- end new ---

//   // Derived server origin and health endpoint (use detected baseUrl)
//   const SERVER_ORIGIN = (() => {
//     try {
//       if (!baseUrl) return (typeof window !== 'undefined' ? window.location.origin : 'http://localhost:4000');
//       return baseUrl.startsWith('http') ? new URL(baseUrl).origin : window.location.origin;
//     } catch (e) { return 'http://localhost:4000'; }
//   })();
//   const HEALTH_ENDPOINT = `${SERVER_ORIGIN.replace(/\/$/, '')}/health`;
  
//   // State management
//   const [currentUser, setCurrentUser] = useState(null);
//   const [activeForm, setActiveForm] = useState('login');
//   const [showForgotPassword, setShowForgotPassword] = useState(false);
//   const [showVerification, setShowVerification] = useState(false);
//   const [messages, setMessages] = useState([]);
//   const [pendingVerification, setPendingVerification] = useState(null);
  
//   // Form data states
//   const [loginData, setLoginData] = useState({ email: '', password: '' });
//   const [signupData, setSignupData] = useState({ 
//     name: '', email: '', password: '', confirmPassword: '' 
//   });
//   const [forgotEmail, setForgotEmail] = useState('');
//   const [verificationCode, setVerificationCode] = useState('');
//   const [rememberMe, setRememberMe] = useState(false);
//   const [termsAccepted, setTermsAccepted] = useState(false);
  
//   // Captcha state
//   const [captcha, setCaptcha] = useState({ question: '', answer: 0 });
//   const [captchaInput, setCaptchaInput] = useState('');
//   const [signupCaptchaInput, setSignupCaptchaInput] = useState('');
  
//   // Password strength
//   const [passwordStrength, setPasswordStrength] = useState(0);
  
//   // Password visibility
//   const [passwordVisible, setPasswordVisible] = useState({
//     login: false,
//     signup: false,
//     confirm: false
//   });

//   // Initialize captcha on component mount
//   useEffect(() => {
//     setCaptcha(generateCaptcha());
    
//     // Check for remembered user
//     try {
//       const rememberedUser = JSON.parse(localStorage.getItem('rememberedUser') || 'null');
//       if (rememberedUser) {
//         setLoginData({
//           email: rememberedUser.email,
//           password: rememberedUser.password || ''
//         });
//         setRememberMe(true);
//       }
//     } catch (e) {
//       // ignore parse errors
//     }
//   }, []);

//   // Toggle Password Visibility
//   const togglePasswordVisibility = (field) => {
//     setPasswordVisible(prev => ({
//       ...prev,
//       [field]: !prev[field]
//     }));
//   };

//   // Check Password Strength
//   const checkPasswordStrength = (password) => {
//     let strength = 0;
    
//     if (password.length >= 8) strength++;
//     if (password.match(/[a-z]/) && password.match(/[A-Z]/)) strength++;
//     if (password.match(/[0-9]/)) strength++;
//     if (password.match(/[^a-zA-Z0-9]/)) strength++;
    
//     setPasswordStrength(strength);
//     return strength;
//   };

//   // Generate Strong Password
//   const generatePassword = () => {
//     const lowercase = 'abcdefghijklmnopqrstuvwxyz';
//     const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
//     const numbers = '0123456789';
//     const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';
    
//     let password = '';
//     password += lowercase[Math.floor(Math.random() * lowercase.length)];
//     password += uppercase[Math.floor(Math.random() * uppercase.length)];
//     password += numbers[Math.floor(Math.random() * numbers.length)];
//     password += symbols[Math.floor(Math.random() * symbols.length)];
    
//     const allChars = lowercase + uppercase + numbers + symbols;
//     for (let i = 4; i < 12; i++) {
//       password += allChars[Math.floor(Math.random() * allChars.length)];
//     }
    
//     password = password.split('').sort(() => Math.random() - 0.5).join('');
    
//     setSignupData(prev => ({
//       ...prev,
//       password,
//       confirmPassword: password
//     }));
    
//     checkPasswordStrength(password);
//     showMessage('Strong password generated!', 'success');
//   };

//   // Show Message
//   const showMessage = (message, type = 'info') => {
//     const id = Date.now();
//     setMessages(prev => [...prev, { id, message, type }]);
    
//     setTimeout(() => {
//       setMessages(prev => prev.filter(msg => msg.id !== id));
//     }, 5000);
//   };

//   // API call function (diagnostic version)
//   const apiCall = async (endpoint, method = 'GET', data = null, timeoutMs = 8000) => {
//     const controller = new AbortController();
//     const timer = setTimeout(() => controller.abort(), timeoutMs);

//     // Determine request base:
//     // - If baseUrl is an absolute URL (starts with http) use it.
//     // - If baseUrl is a path like '/api' or '' then prefer '/api' for proxy usage.
//     const requestBase = (() => {
//       if (!baseUrl) return '/api';               // prefer proxy when nothing detected
//       if (baseUrl.startsWith('http')) return baseUrl.replace(/\/$/, '');
//       if (baseUrl.startsWith('/')) return baseUrl.replace(/\/$/, '');
//       return baseUrl;
//     })();

//     const url = `${requestBase.endsWith('/') ? requestBase.slice(0, -1) : requestBase}${endpoint.startsWith('/') ? endpoint : '/' + endpoint}`;

//     const options = {
//       method,
//       headers: { 'Content-Type': 'application/json' },
//       signal: controller.signal,
//       mode: 'cors',
//     };
//     if (data && (method === 'POST' || method === 'PUT')) options.body = JSON.stringify(data);

//     console.groupCollapsed && console.groupCollapsed('apiCall');
//     console.log('Request URL:', url);
//     console.log('Options:', options);
//     try {
//       const res = await fetch(url, options);
//       clearTimeout(timer);
//       console.log('Response status:', res.status, res.statusText);

//       // Safely parse response as JSON when possible, otherwise get text
//       let payload = null;
//       const contentType = res.headers.get('content-type') || '';
//       try {
//         if (contentType.includes('application/json')) {
//           payload = await res.json();
//         } else {
//           payload = await res.text();
//         }
//       } catch (parseErr) {
//         try { payload = await res.text(); } catch (e) { payload = null; }
//       }
//       console.log('Parsed response payload:', payload);

//       if (!res.ok) {
//         const bodyMsg = typeof payload === 'string' ? payload : (payload?.error || payload?.message);
//         const msg = bodyMsg || `${res.status} ${res.statusText}` || `Request failed: ${res.status}`;
//         const err = new Error(msg);
//         err.status = res.status;
//         err.payload = payload;
//         throw err;
//       }

//       console.groupEnd && console.groupEnd('apiCall');
//       return payload;
//     } catch (err) {
//       clearTimeout(timer);
//       console.error('API call error:', err);

//       // If network/CORS problem, attempt direct health check and log details
//       if (err instanceof TypeError || err.name === 'TypeError') {
//         console.warn('TypeError detected — likely network/CORS. Running health check:', HEALTH_ENDPOINT);
//         try {
//           const h = await fetch(HEALTH_ENDPOINT, { method: 'GET', mode: 'cors' });
//           console.log('Health check response status:', h.status);
//           const text = await h.text();
//           console.log('Health check body:', text);
//           if (!h.ok) throw new Error('health check returned non-ok');
//           showMessage('Backend reachable but network error on API call (check console for CORS).', 'error');
//         } catch (healthErr) {
//           console.error('Health check failed:', healthErr);
//           showMessage('Cannot reach backend. Is the server running? (checked /health)', 'error');
//         }
//       } else if (err.name === 'AbortError') {
//         showMessage('Request timed out. Backend may be slow or unreachable.', 'error');
//       } else {
//         const serverMsg = err.payload && typeof err.payload === 'string'
//           ? err.payload
//           : (err.payload && typeof err.payload === 'object' ? (err.payload.error || err.payload.message) : err.message);
//         showMessage(`Server error (${err.status || 'error'}): ${serverMsg || err.message}`, 'error');
//       }

//       console.groupEnd && console.groupEnd('apiCall');
//       throw err;
//     }
//   };
  
//   // Form Handlers
//   const handleLoginSubmit = async (e) => {
//     e.preventDefault();
    
//     // Check captcha
//     if (parseInt(captchaInput, 10) !== captcha.answer) {
//       showMessage('Incorrect captcha answer!', 'error');
//       setCaptcha(generateCaptcha());
//       return;
//     }
    
//     try {
//       const result = await apiCall('/auth/login', 'POST', {
//         email: loginData.email,
//         password: loginData.password
//       });
      
//       const { user, token } = result;
      
//       // Remember me functionality
//       if (rememberMe) {
//         localStorage.setItem('rememberedUser', JSON.stringify({ 
//           email: loginData.email
//         }));
//         localStorage.setItem('authToken', token);
//       } else {
//         localStorage.removeItem('rememberedUser');
//         sessionStorage.setItem('authToken', token);
//       }
      
//       setCurrentUser(user);
//       showMessage('Login successful! Redirecting...', 'success');
      
//       // Redirect to home page after successful login
//       setTimeout(() => {
//         navigate('/'); // Redirect to home page
//       }, 1500);
//     } catch (error) {
//       // handled in apiCall
//     }
//   };

//   const handleSignupSubmit = async (e) => {
//     e.preventDefault();
    
//     // Check captcha
//     if (parseInt(signupCaptchaInput, 10) !== captcha.answer) {
//       showMessage('Incorrect captcha answer!', 'error');
//       setCaptcha(generateCaptcha());
//       return;
//     }
    
//     if (signupData.password !== signupData.confirmPassword) {
//       showMessage('Passwords do not match!', 'error');
//       return;
//     }
    
//     if (checkPasswordStrength(signupData.password) < 3) {
//       showMessage('Password is too weak! Please use a stronger password.', 'error');
//       return;
//     }
    
//     if (!termsAccepted) {
//       showMessage('Please accept the terms and conditions', 'error');
//       return;
//     }
    
//     try {
//       const result = await apiCall('/auth/register', 'POST', {
//         name: signupData.name,
//         email: signupData.email,
//         password: signupData.password
//       });
      
//       setPendingVerification({ email: signupData.email });
//       setShowVerification(true);
      
//       showMessage('Account successfully created! Please check your email for verification code.', 'success');
//     } catch (error) {
//       // handled in apiCall
//     }
//   };

//   const handleVerificationSubmit = async (e) => {
//     e.preventDefault();
    
//     if (!pendingVerification?.email) {
//       showMessage('No pending verification found. Please register or request a code first.', 'error');
//       return;
//     }

//     // capture the email before clearing pendingVerification
//     const emailToVerify = pendingVerification.email;

//     try {
//       await apiCall('/auth/verify-email', 'POST', {
//         email: emailToVerify,
//         code: verificationCode
//       });
      
//       setShowVerification(false);
//       setPendingVerification(null);
//       showMessage('Email verified successfully! Redirecting to login...', 'success');
      
//       setTimeout(() => {
//         setActiveForm('login');
//         setLoginData(prev => ({ ...prev, email: emailToVerify || prev.email }));
//       }, 1500);
//     } catch (error) {
//       // handled in apiCall
//     }
//   };
  
//   const handleForgotPasswordSubmit = async (e) => {
//     e.preventDefault();
    
//     try {
//       // endpoint not implemented in backend stub — placeholder
//       await apiCall('/auth/forgot-password', 'POST', {
//         email: forgotEmail
//       });
      
//       showMessage('Password reset link sent to your email!', 'success');
//       setShowForgotPassword(false);
//     } catch (error) {
//       // handled in apiCall
//     }
//   };
  
//   const resendVerificationCode = async () => {
//     if (!pendingVerification?.email) {
//       showMessage('No email to resend code to. Please register first.', 'error');
//       return;
//     }
//     try {
//       await apiCall('/auth/send-verification', 'POST', { email: pendingVerification.email });
//       showMessage('Verification code resent to your email!', 'success');
//     } catch (error) {
//       // handled in apiCall
//     }
//   };

//   // Render Login Form
//   const renderLoginForm = () => (
//     <form onSubmit={handleLoginSubmit} className="space-y-6">
//       <div>
//         <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
//           Email Address
//         </label>
//         <input
//           type="email"
//           id="email"
//           className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200"
//           placeholder="Enter your email"
//           value={loginData.email}
//           onChange={(e) => setLoginData({...loginData, email: e.target.value})}
//           required
//         />
//       </div>
      
//       <div>
//         <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
//           Password
//         </label>
//         <div className="relative">
//           <input
//             type={passwordVisible.login ? "text" : "password"}
//             id="password"
//             className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200 pr-12"
//             placeholder="Enter your password"
//             value={loginData.password}
//             onChange={(e) => setLoginData({...loginData, password: e.target.value})}
//             required
//           />
//           <button
//             type="button"
//             className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
//             onClick={() => togglePasswordVisibility('login')}
//           >
//             <EyeIcon visible={passwordVisible.login} />
//           </button>
//         </div>
//       </div>
      
//       <div className="flex items-center justify-between">
//         <div className="flex items-center">
//           <input
//             type="checkbox"
//             id="remember"
//             className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
//             checked={rememberMe}
//             onChange={(e) => setRememberMe(e.target.checked)}
//           />
//           <label htmlFor="remember" className="ml-2 block text-sm text-gray-700">
//             Remember me
//           </label>
//         </div>
        
//         <button
//           type="button"
//           className="text-sm text-purple-600 hover:text-purple-800 font-medium"
//           onClick={() => setShowForgotPassword(true)}
//         >
//           Forgot Password?
//         </button>
//       </div>
      
//       <div>
//         <label htmlFor="captcha" className="block text-sm font-medium text-gray-700 mb-1">
//           Security Check: {captcha.question}
//         </label>
//         <input
//           type="number"
//           id="captcha"
//           className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200"
//           placeholder="Enter the answer"
//           value={captchaInput}
//           onChange={(e) => setCaptchaInput(e.target.value)}
//           required
//         />
//       </div>
      
//       <button
//         type="submit"
//         className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 text-white py-3 px-4 rounded-lg font-semibold hover:from-purple-700 hover:to-indigo-700 transition duration-200 shadow-md"
//       >
//         Sign In
//       </button>
      
//       <div className="text-center mt-4">
//         <p className="text-sm text-gray-600">
//           Don't have an account?{' '}
//           <button
//             type="button"
//             className="text-purple-600 hover:text-purple-800 font-medium"
//             onClick={() => setActiveForm('signup')}
//           >
//             Sign Up
//           </button>
//         </p>
//       </div>
//     </form>
//   );

//   // Render Signup Form
//   const renderSignupForm = () => (
//     <form onSubmit={handleSignupSubmit} className="space-y-6">
//       <div>
//         <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
//           Full Name
//         </label>
//         <input
//           type="text"
//           id="name"
//           className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200"
//           placeholder="Enter your full name"
//           value={signupData.name}
//           onChange={(e) => setSignupData({...signupData, name: e.target.value})}
//           required
//         />
//       </div>
      
//       <div>
//         <label htmlFor="signup-email" className="block text-sm font-medium text-gray-700 mb-1">
//           Email Address
//         </label>
//         <input
//           type="email"
//           id="signup-email"
//           className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200"
//           placeholder="Enter your email"
//           value={signupData.email}
//           onChange={(e) => setSignupData({...signupData, email: e.target.value})}
//           required
//         />
//       </div>
      
//       <div>
//         <label htmlFor="signup-password" className="block text-sm font-medium text-gray-700 mb-1">
//           Password
//           <button
//             type="button"
//             className="ml-2 text-xs text-purple-600 hover:text-purple-800"
//             onClick={generatePassword}
//           >
//             Generate Strong Password
//           </button>
//         </label>
//         <div className="relative">
//           <input
//             type={passwordVisible.signup ? "text" : "password"}
//             id="signup-password"
//             className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200 pr-12"
//             placeholder="Create a strong password"
//             value={signupData.password}
//             onChange={(e) => {
//               setSignupData({...signupData, password: e.target.value});
//               checkPasswordStrength(e.target.value);
//             }}
//             required
//           />
//           <button
//             type="button"
//             className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
//             onClick={() => togglePasswordVisibility('signup')}
//           >
//             <EyeIcon visible={passwordVisible.signup} />
//           </button>
//         </div>
        
//         {signupData.password && (
//           <div className="mt-2">
//             <div className="flex items-center mb-1">
//               <div className="w-full bg-gray-200 rounded-full h-2">
//                 <div 
//                   className={`h-2 rounded-full ${
//                     passwordStrength === 0 ? 'bg-red-500' :
//                     passwordStrength === 1 ? 'bg-red-500' :
//                     passwordStrength === 2 ? 'bg-yellow-500' :
//                     passwordStrength === 3 ? 'bg-green-500' : 'bg-green-600'
//                   }`}
//                   style={{ width: `${(passwordStrength / 4) * 100}%` }}
//                 ></div>
//               </div>
//             </div>
//             <p className="text-xs text-gray-600">
//               {passwordStrength === 0 ? 'Very Weak' :
//                passwordStrength === 1 ? 'Weak' :
//                passwordStrength === 2 ? 'Medium' :
//                passwordStrength === 3 ? 'Strong' : 'Very Strong'}
//             </p>
//           </div>
//         )}
//       </div>
      
//       <div>
//         <label htmlFor="confirm-password" className="block text-sm font-medium text-gray-700 mb-1">
//           Confirm Password
//         </label>
//         <div className="relative">
//           <input
//             type={passwordVisible.confirm ? "text" : "password"}
//             id="confirm-password"
//             className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200 pr-12"
//             placeholder="Confirm your password"
//             value={signupData.confirmPassword}
//             onChange={(e) => setSignupData({...signupData, confirmPassword: e.target.value})}
//             required
//           />
//           <button
//             type="button"
//             className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
//             onClick={() => togglePasswordVisibility('confirm')}
//           >
//             <EyeIcon visible={passwordVisible.confirm} />
//           </button>
//         </div>
//       </div>
      
//       <div>
//         <label htmlFor="signup-captcha" className="block text-sm font-medium text-gray-700 mb-1">
//           Security Check: {captcha.question}
//         </label>
//         <input
//           type="number"
//           id="signup-captcha"
//           className="w-full px-4 py-3 bg-white bg-opacity-90 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200"
//           placeholder="Enter the answer"
//           value={signupCaptchaInput}
//           onChange={(e) => setSignupCaptchaInput(e.target.value)}
//           required
//         />
//       </div>
      
//       <div className="flex items-center">
//         <input
//           type="checkbox"
//           id="terms"
//           className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
//           checked={termsAccepted}
//           onChange={(e) => setTermsAccepted(e.target.checked)}
//           required
//         />
//         <label htmlFor="terms" className="ml-2 block text-sm text-gray-700">
//           I agree to the <a href="#" className="text-purple-600 hover:text-purple-800">Terms and Conditions</a>
//         </label>
//       </div>
      
//       <button
//         type="submit"
//         className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 text-white py-3 px-4 rounded-lg font-semibold hover:from-purple-700 hover:to-indigo-700 transition duration-200 shadow-md"
//       >
//         Create Account
//       </button>
      
//       <div className="text-center mt-4">
//         <p className="text-sm text-gray-600">
//           Already have an account?{' '}
//           <button
//             type="button"
//             className="text-purple-600 hover:text-purple-800 font-medium"
//             onClick={() => setActiveForm('login')}
//           >
//             Sign In
//           </button>
//         </p>
//       </div>
//     </form>
//   );

//   // Render Forgot Password Modal
//   const renderForgotPasswordModal = () => (
//     <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
//       <div className="bg-white rounded-2xl shadow-2xl p-6 w-full max-w-md animate-scale-in">
//         <div className="flex justify-between items-center mb-4">
//           <h2 className="text-2xl font-bold text-gray-800">Reset Password</h2>
//           <button
//             onClick={() => setShowForgotPassword(false)}
//             className="text-gray-500 hover:text-gray-700"
//           >
//             <i className="fas fa-times"></i>
//           </button>
//         </div>
        
//         <p className="text-gray-600 mb-6">
//           Enter your email address and we'll send you a link to reset your password.
//         </p>
        
//         <form onSubmit={handleForgotPasswordSubmit} className="space-y-4">
//           <div>
//             <label htmlFor="forgot-email" className="block text-sm font-medium text-gray-700 mb-1">
//               Email Address
//             </label>
//             <input
//               type="email"
//               id="forgot-email"
//               className="w-full px-4 py-3 bg-gray-100 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200"
//               placeholder="Enter your email"
//               value={forgotEmail}
//               onChange={(e) => setForgotEmail(e.target.value)}
//               required
//             />
//           </div>
          
//           <button
//             type="submit"
//             className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 text-white py-3 px-4 rounded-lg font-semibold hover:from-purple-700 hover:to-indigo-700 transition duration-200"
//           >
//             Send Reset Link
//           </button>
//         </form>
//       </div>
//     </div>
//   );

//   // Render Verification Modal
//   const renderVerificationModal = () => (
//     <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
//       <div className="bg-white rounded-2xl shadow-2xl p-6 w-full max-w-md animate-scale-in">
//         <div className="flex justify-between items-center mb-4">
//           <h2 className="text-2xl font-bold text-gray-800">Verify Your Email</h2>
//           <button
//             onClick={() => {
//               setShowVerification(false);
//               setPendingVerification(null);
//             }}
//             className="text-gray-500 hover:text-gray-700"
//           >
//             <i className="fas fa-times"></i>
//           </button>
//         </div>
        
//         <p className="text-gray-600 mb-6">
//           We've sent a verification code to <strong>{pendingVerification?.email}</strong>. 
//           Please enter the code below to verify your email address.
//         </p>
        
//         <form onSubmit={handleVerificationSubmit} className="space-y-4">
//           <div>
//             <label htmlFor="verification-code" className="block text-sm font-medium text-gray-700 mb-1">
//               Verification Code
//             </label>
//             <input
//               type="text"
//               id="verification-code"
//               className="w-full px-4 py-3 bg-gray-100 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-600 focus:border-transparent transition duration-200"
//               placeholder="Enter verification code"
//               value={verificationCode}
//               onChange={(e) => setVerificationCode(e.target.value)}
//               required
//             />
//           </div>
          
//           <button
//             type="submit"
//             className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 text-white py-3 px-4 rounded-lg font-semibold hover:from-purple-700 hover:to-indigo-700 transition duration-200"
//           >
//             Verify Email
//           </button>
//         </form>
        
//         <div className="text-center mt-4">
//           <p className="text-sm text-gray-600">
//             Didn't receive the code?{' '}
//             <button
//               type="button"
//               className="text-purple-600 hover:text-purple-800 font-medium"
//               onClick={resendVerificationCode}
//             >
//               Resend Code
//             </button>
//           </p>
//         </div>
//       </div>
//     </div>
//   );

//   // Message Component
//   const Message = ({ message, type, onClose }) => (
//     <div className={`p-4 mb-4 rounded-lg shadow-md flex items-center justify-between animate-slide-in ${
//       type === 'error' ? 'bg-red-100 text-red-700' :
//       type === 'success' ? 'bg-green-100 text-green-700' :
//       'bg-blue-100 text-blue-700'
//     }`}>
//       <div className="flex items-center">
//         <i className={`fas ${
//           type === 'error' ? 'fa-exclamation-circle' :
//           type === 'success' ? 'fa-check-circle' : 'fa-info-circle'
//         } mr-3`}></i>
//         <span>{message}</span>
//       </div>
//       <button
//         onClick={onClose}
//         className="ml-4 text-gray-500 hover:text-gray-700"
//       >
//         <i className="fas fa-times"></i>
//       </button>
//     </div>
//   );

//   return (
//     <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-600 to-indigo-600 p-4">
//       {/* Main Container */}
//       <div className="w-full max-w-md">
//         {/* Auth Form Container */}
//         <div className="bg-white bg-opacity-20 backdrop-filter backdrop-blur-lg rounded-2xl shadow-2xl p-8 animate-fade-in">
//           {/* Logo/Header */}
//           <div className="text-center mb-8">
//             <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-purple-600 to-indigo-600 rounded-full mb-4">
//               <i className="fas fa-shield-alt text-white text-2xl"></i>
//             </div>
//             <h1 className="text-3xl font-bold text-gray-800">
//               {activeForm === 'login' ? 'Welcome Back' : 'Create Account'}
//             </h1>
//             <p className="text-gray-600 mt-2">
//               {activeForm === 'login' 
//                 ? 'Sign in to continue to your account' 
//                 : 'Sign up to get started'}
//             </p>
//           </div>

//           {/* Render the appropriate form */}
//           {activeForm === 'login' ? renderLoginForm() : renderSignupForm()}
//         </div>

//         {/* Modals */}
//         {showForgotPassword && renderForgotPasswordModal()}
//         {showVerification && renderVerificationModal()}

//         {/* Success/Error Messages */}
//         <div className="fixed top-4 right-4 z-50 max-w-sm w-full">
//           {messages.map(msg => (
//             <Message 
//               key={msg.id} 
//               message={msg.message} 
//               type={msg.type} 
//               onClose={() => setMessages(prev => prev.filter(m => m.id !== msg.id))}
//             />
//           ))}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default AuthForm;
